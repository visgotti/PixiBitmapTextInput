/// <reference types="pixi.js" />
import { ValidMeasurement } from "../../types";
export declare type StyleOptions = {
    width?: ValidMeasurement;
    height?: ValidMeasurement;
    cursorHeight: ValidMeasurement;
    cursorWidth: number;
    borderWidth?: number;
    borderColor?: number;
    fontColor: number;
    highlightedFontColor: number;
    cursorColor: number;
    backgroundColor: number;
    highlightedBackgroundColor: number;
    borderOpacity: number;
    xPadding: number;
    yPadding: number;
};
export declare type StyleOptionsParams = {
    width?: number | string;
    height?: number | string;
    borderWidth?: number;
    borderColor?: number;
    fontColor?: number;
    highlightedFontColor?: number;
    cursorColor?: number;
    cursorHeight?: number | string;
    cursorWidth: number;
    backgroundColor?: number;
    highlightedBackgroundColor?: number;
    borderOpacity?: number;
    xPadding?: number;
    yPadding?: number;
};
declare class TextField extends PIXI.Container {
    private styleOptions;
    private cursorSprite;
    private textbox;
    private textboxMask;
    private textSprite;
    private inFocus;
    private cursorIndex;
    private clickedTimestamp;
    private cursorAnimationFrame;
    private lastCursorTs;
    private accCursorTime;
    private toggleCursorTime;
    private cursorIsVisible;
    private _text;
    private _visible;
    private overflowOffsetX;
    private overflowOffsetY;
    private dragIndexStart;
    private dragIndexEnd;
    private inDrag;
    submitKeyCodes: Array<number>;
    ignoreKeys: Array<number>;
    _maxCharacterLength: number;
    private onFocusHandler;
    private onBlurHandler;
    private onChangeHandler;
    private onSubmitHandler;
    private onCharLimitHandler;
    constructor(font: string, styleOptions?: StyleOptionsParams, maxCharacterLength?: any, ignoreKeys?: any);
    updateStyle(styleOptions: StyleOptionsParams): void;
    private redraw;
    private redrawCursor;
    private redrawText;
    private redrawTextbox;
    private handleMouseUp;
    private handleMouseDown;
    private handleMouseMove;
    private clearRange;
    private handleRangeStart;
    private handleRangeChange;
    private handleRangeFinish;
    private getCursorXFromIndex;
    private moveCursor;
    private getCursorIndexFromX;
    private getSelectedChars;
    private replaceSelectedWith;
    private getSelectedRangeIndexes;
    private getSelectedRange;
    selectAll(): void;
    private setSelectedRange;
    private charFromPosition;
    private removeLeftOfCursor;
    private removeRightOfCursor;
    onCharLimit(handler: any): void;
    onChange(handler: any): void;
    onFocus(handler: any): void;
    onBlur(handler: any): void;
    onSubmit(handler: any): void;
    clear(): void;
    submit(): void;
    focus(): void;
    blur(): void;
    maxCharacterLength: number;
    change(value: any): boolean;
    private startCursorAnimation;
    private stopCursorAnimation;
    private blinkCursor;
    private checkForOutsideClick;
    text: string;
    visible: any;
    show(): void;
    hide(): void;
}
declare const _default: {
    new (...args: any[]): {
        [x: string]: any;
        copiedText: string;
        textStates: string[];
        currentStateIndex: number;
        stateInterval: any;
        changeStateIndex(change: any): void;
        registerHandlers(): void;
        unregisterHandlers(): void;
        onPaste(event: any): void;
        onCopy(event: any): void;
        onCut(event: any): void;
        onBackspace(): void;
        onDelete(): void;
        onKeyDown(event: any): void;
        onKeyPress(event: any): void;
        addState(newText: any): void;
    };
} & typeof TextField;
export default _default;
