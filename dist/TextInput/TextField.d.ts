/// <reference types="pixi.js" />
declare type ValidMeasurement = {
    value: number;
    type: string;
};
export declare type StyleOptions = {
    width?: ValidMeasurement;
    height?: ValidMeasurement;
    cursorHeight: ValidMeasurement;
    cursorWidth: number;
    borderWidth?: number;
    borderColor?: number;
    fontColor: number;
    highlightedFontColor: number;
    cursorColor: number;
    backgroundColor: number;
    highlightedBackgroundColor: number;
    borderOpacity: number;
    xPadding: number;
    yPadding: number;
};
export declare type StyleOptionsParams = {
    width?: number | string;
    height?: number | string;
    borderWidth?: number;
    borderColor?: number;
    fontColor?: number;
    highlightedFontColor?: number;
    cursorColor?: number;
    cursorHeight?: number | string;
    cursorWidth: number;
    backgroundColor?: number;
    highlightedBackgroundColor?: number;
    borderOpacity?: number;
    xPadding?: number;
    yPadding?: number;
};
export declare class TextField extends PIXI.Container {
    private styleOptions;
    private cursorSprite;
    private textbox;
    private textSprite;
    private inFocus;
    private cursorIndex;
    private clickedTimestamp;
    private overflowOffsetX;
    private overflowOffsetY;
    private dragIndexStart;
    private dragIndexEnd;
    private inDrag;
    private onFocusHandler;
    private onBlurHandler;
    private onChangeHandler;
    constructor(font: string, styleOptions?: StyleOptionsParams);
    updateStyle(styleOptions: StyleOptionsParams): void;
    private redraw;
    private redrawCursor;
    private redrawText;
    private redrawTextbox;
    private handleMouseUp;
    private handleMouseDown;
    private handleMouseMove;
    private clearRange;
    private handleRangeStart;
    private handleRangeChange;
    private handleRangeFinish;
    private getCursorXFromIndex;
    private getCursorIndexFromX;
    private getSelectedRange;
    private charFromPosition;
    addCharsAtIndex(start: any, chars: any): void;
    removeCharsBetweenIndexes(start: any, finish: any): void;
    leftClick(x: any, y: any): void;
    rightClick(x: any, y: any): void;
    undo(): void;
    redo(): void;
    paste(): void;
    cut(): void;
    onChange(handler: any): void;
    onFocus(handler: any): void;
    onBlur(handler: any): void;
    focus(): void;
    blur(): void;
    private checkForOutsideClick;
}
export {};
